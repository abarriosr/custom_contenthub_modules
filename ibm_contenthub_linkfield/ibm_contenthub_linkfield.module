<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\UrlHelper;
use Acquia\ContentHubClient\Entity as ContentHubEntity;

const IBM_CONTENTHUB_LINKFIELD_LINK_NODE_PATH     = 'ibm_contenthub_link_node_path';
const IBM_CONTENTHUB_LINKFIELD_LINK_NODE_FRAGMENT = 'ibm_contenthub_link_node_fragment';

/**
 * Allows modules to modify the CDF before it is sent to the Content Hub.
 *
 * Common Data Format (CDF): https://docs.acquia.com/content-hub/cdf.
 *
 * This is very useful to modify the CDF (usually its attributes) before
 * it is sent to the Content Hub during the normalization process.
 * Note that the changes will be reflected in the entity published in Content
 * Hub, but the local Drupal entity will not be affected.
 *
 * @param \Acquia\ContentHubClient\Entity $contenthub_entity
 *   The Content Hub CDF.
 */
function ibm_contenthub_linkfield_acquia_contenthub_cdf_from_drupal_alter(ContentHubEntity $contenthub_entity) {
  // Adding changes to the 'redirect' entity types.
  if ($contenthub_entity->getType() == 'node') {
    $bundle = $contenthub_entity->getAttribute('type')->getValue();

  }
}


/**
 * Implements hook_entity_base_field_info().
 */
function ibm_contenthub_linkfield_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager * */
    $entity_manager = \Drupal::service("acquia_contenthub.entity_manager");
    $node_enabled = FALSE;

    $bundle = $entity_type->getBundleEntityType();

    /** @var \Drupal\acquia_contenthub\Entity\ContentHubEntityTypeConfig $node_config_entity */
    if ($node_config_entity = $entity_manager->getContentHubEntityTypeConfigurationEntity('node')) {
      $node_enabled = $node_config_entity->isEnableIndex('node');
    }

    if ($node_enabled) {
      $fields = array();
      $fields[IBM_CONTENTHUB_LINKFIELD_LINK_NODE_PATH] = BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Node dependencies'))
        ->setDescription(t('Computed field to add entity dependencies to node entities in link field paths.'))
        ->setComputed(TRUE)
        ->setCustomStorage(TRUE)
        ->setClass('\\Drupal\\ibm_contenthub_linkfield\\Field\\EntityReferenceLinkField');
      $fields[IBM_CONTENTHUB_LINKFIELD_LINK_NODE_FRAGMENT] = BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Node dependencies'))
        ->setDescription(t('Computed field to add entity dependencies to node entities in link field fragments.'))
        ->setComputed(TRUE)
        ->setCustomStorage(TRUE)
        ->setClass('\\Drupal\\ibm_contenthub_linkfield\\Field\\EntityReferenceLinkField');
      return $fields;
    }
  }
}

/**
 * Extracts the two referenced entities from a LinkField.
 *
 * @param \Drupal\node\NodeInterface $entity
 *   A Node Entity.
 *
 * @return array
 *   The entities.
 */
function ibm_contenthub_linkfield_extract_destination_entities(NodeInterface $entity, $field_name) {
  $output = [];
  $fields = $entity->getFields();
  $global_link_fields = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('link');
  $link_fields = array_intersect(array_keys($fields), array_keys($global_link_fields['node']));
  foreach ($link_fields as $field) {
    $values = $entity->get($field)->getValue();
    foreach ($values as $value) {
      $uri = !empty($value['uri']) ? $value['uri'] : FALSE;
      if ($uri) {
        $parts = UrlHelper::parse($uri);
        $path = pathinfo($parts['path']);
        if ($path['dirname'] == 'internal:/node') {
          $nid_path = $path['basename'];
          $nid_fragment = $parts['fragment'];
          if (is_numeric($nid_path)) {
            $output[$field]['node_path']['nid'][] = $nid_path;
            $output[$field]['node_path']['uuid'][] = ibm_contenthub_linkfield_get_node_uuid_from_nid($nid_path);
          }
          if (is_numeric($nid_fragment)) {
            $output[$field]['node_fragment']['nid'][] = $nid_fragment;
            $output[$field]['node_fragment']['uuid'][] = ibm_contenthub_linkfield_get_node_uuid_from_nid($nid_fragment);
          }
        }
      }
    }
  }
  return $output;
}

/**
 * Helper function to obtain the UUID from NID.
 *
 * @param int $nid
 *   The node nid.
 *
 * @return string
 *   The node UUID.
 */
function ibm_contenthub_linkfield_get_node_uuid_from_nid($nid) {
  $query = \Drupal::database()->select('node')
    ->fields('node', ['uuid']);
  $query->condition("node.nid", $nid);
  return $query->execute()->fetchField();
}