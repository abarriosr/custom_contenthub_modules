<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Acquia\ContentHubClient\Entity as ContentHubEntity;
use Acquia\ContentHubClient\Attribute;

const IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_NODE = 'ibm_contenthub_redirect_entity_node';
const IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_TERM = 'ibm_contenthub_redirect_entity_taxonomy_term';

/**
 * Allows modules to modify the CDF before it is sent to the Content Hub.
 *
 * Common Data Format (CDF): https://docs.acquia.com/content-hub/cdf.
 *
 * This is very useful to modify the CDF (usually its attributes) before
 * it is sent to the Content Hub during the normalization process.
 * Note that the changes will be reflected in the entity published in Content
 * Hub, but the local Drupal entity will not be affected.
 *
 * @param \Acquia\ContentHubClient\Entity $contenthub_entity
 *   The Content Hub CDF.
 */
function ibm_contenthub_redirect_acquia_contenthub_cdf_from_drupal_alter(ContentHubEntity $contenthub_entity) {

  // Adding changes to the 'redirect' entity types.
  if ($contenthub_entity->getType() == 'redirect') {

    // Always check that the changes have already been applied, because the
    // normalizer could be called more than once during the export process.
    if ($contenthub_entity->getAttribute('langcode') === FALSE) {

      // Setting up langcode.
      $language_field = $contenthub_entity->getAttribute('language');
      $contenthub_entity->setAttribute('langcode', $language_field);
      $contenthub_entity->removeAttribute('language');

      // If we have manage to set the new attribute to store the reference
      // UUID for the entity that will produce the redirection, then we can
      // safely delete the 'redirect_redirect' attribute so that we do not
      // confuse the denormalization of the entity as we will have to re-
      // create the deleted attribute before importing.
      if ($contenthub_entity->getAttribute(IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_NODE) !== FALSE ||
          $contenthub_entity->getAttribute(IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_TERM) !== FALSE ) {
        $contenthub_entity->removeAttribute('redirect_redirect');
      }
    }
  }
}

/**
 * Allows modules to modify the CDF before converting to Drupal Entity.
 *
 * Common Data Format (CDF): https://docs.acquia.com/content-hub/cdf.
 *
 * This is useful to modify the CDF that has been fetched from the Content
 * Hub before it has been converted to Drupal Entity during the denormalization
 * process.
 * Note that we these changes affect the local entity imported from Content Hub
 * but do not affect the entity in Content Hub itself.
 *
 * @param \Acquia\ContentHubClient\Entity $contenthub_entity
 *   The Content Hub CDF.
 */
function ibm_contenthub_redirect_acquia_contenthub_cdf_from_hub_alter(ContentHubEntity $contenthub_entity) {
  if ($contenthub_entity->getType() == 'redirect') {

    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
    $entity_repository = \Drupal::service("entity.repository");

    // Always check that the changes have already been applied, because the
    // normalizer could be called more than once during the export process.
    if ($contenthub_entity->getAttribute('language') === FALSE) {
      $language_field = $contenthub_entity->getAttribute('langcode');
      $contenthub_entity['attributes']['language'] = $language_field;
    }

    // Loading the two fields and checking which ones of those have data.
    $redirect_attribute_node = $contenthub_entity->getAttribute(IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_NODE);
    $redirect_attribute_term = $contenthub_entity->getAttribute(IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_TERM);
    $redirect_attribute = $redirect_attribute_node ? $redirect_attribute_node : $redirect_attribute_term;
    $entity_type = $redirect_attribute_node ? 'node' : 'taxonomy_term';

    // Setting back the 'redirect_redirect' field.
    if ($redirect_attribute) {
      $redirect_redirect = new Attribute(Attribute::TYPE_ARRAY_STRING);
      $values = $redirect_attribute['value'];
      foreach ($values as $language => $value) {
        $uuid = reset($value);

        // Try to load the entity.
        if ($entity = $entity_repository->loadEntityByUuid($entity_type, $uuid)) {

          $redirect_redirect = (array) $redirect_redirect;
          $url = $entity->toUrl();
          // Setting the redirect value array.

          $redirect_value = [
            'uri' => 'internal:' . base_path() . $url->getInternalPath(),
            'title' => NULL,
            'options' => [],
          ];
          $json_value = json_encode($redirect_value, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT);
          $redirect_redirect['value'] = [
            $language => [
              $json_value,
            ],
          ];
        }
        else {
          // We did not find the entity then do not try to save this redirect.
        }
      }
      $contenthub_entity['attributes']['redirect_redirect'] = $redirect_redirect;
      if ($entity_type === 'node') {
        $contenthub_entity->removeAttribute(IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_NODE);
      }
      elseif ($entity_type == 'taxonomy_term') {
        $contenthub_entity->removeAttribute(IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_TERM);
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function ibm_contenthub_redirect_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'redirect') {
    /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager * */
    $entity_manager = \Drupal::service("acquia_contenthub.entity_manager");
    $redirect_enabled = FALSE;

    /** @var \Drupal\acquia_contenthub\Entity\ContentHubEntityTypeConfig $redirect_config_entity */
    if ($redirect_config_entity = $entity_manager->getContentHubEntityTypeConfigurationEntity('redirect')) {
      $redirect_enabled = $redirect_config_entity->isEnableIndex('redirect');
    }

    if ($redirect_enabled) {
      $fields = array();
      $fields[IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_NODE] = BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Redirect dependencies'))
        ->setDescription(t('Computed field to add entity dependencies to node redirect entities.'))
        ->setComputed(TRUE)
        ->setCustomStorage(TRUE)
        ->setClass('\\Drupal\\ibm_contenthub_redirect\\Field\\EntityReferenceRedirect');
      $fields[IBM_CONTENTHUB_REDIRECT_ATTRIBUTE_TERM] = BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Redirect dependencies'))
        ->setDescription(t('Computed field to add entity dependencies to taxonomy_term redirect entities.'))
        ->setSetting('target_type', 'taxonomy_term')
        ->setComputed(TRUE)
        ->setCustomStorage(TRUE)
        ->setClass('\\Drupal\\ibm_contenthub_redirect\\Field\\EntityReferenceRedirect');
      return $fields;
    }
  }
}

/**
 * Implements hook_acquia_contenthub_is_eligible_entity().
 *
 * @param object $entity
 *   The Drupal entity.
 *
 * @return bool
 *   TRUE if the entity should be published, FALSE otherwise.
 */
function ibm_contenthub_redirect_acquia_contenthub_is_eligible_entity($entity) {
  if ($entity->getEntityTypeId() === 'redirect') {
    if ($dest_entity = ibm_contenthub_redirect_extract_destination_entity($entity)) {
      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
      $entity_type_manager = \Drupal::entityTypeManager();
      if ($destination_entity = $entity_type_manager->getStorage($dest_entity['type'])
        ->load($dest_entity['id'])
      ) {
        /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager */
        $entity_manager = \Drupal::service("acquia_contenthub.entity_manager");
        return $entity_manager->isPublished($destination_entity);
      }
    }
    return FALSE;
  }
}

/**
 * Extracts the entities that are needed to construct the destination path.
 *
 * @param object $redirect_entity
 *   The Redirect Entity.
 *
 * @return array|bool
 *   An array of entity type and id referenced by the destination path or FALSE.
 */
function ibm_contenthub_redirect_extract_destination_entity($redirect_entity) {
  $redirect = $redirect_entity->get('redirect_redirect')->getValue();
  // Obtaining only the unique value.
  $redirect_item = reset($redirect);
  $uri = $redirect_item['uri'];
  $entity = FALSE;
  list($source, $url) = explode(':', $uri);
  if ($source === 'internal') {
    // Checking for node URL.
    $path = pathinfo($url);
    switch ($path['dirname']) {
      case '/node':
        $nid = $path['filename'];
        if (is_numeric($nid)) {
          $entity = [
            'type' => 'node',
            'id' => $nid,
          ];
        }
        break;

      case '/taxonomy/term':
        $tid = $path['filename'];
        if (is_numeric($tid)) {
          $entity = [
            'type' => 'taxonomy_term',
            'id' => $tid,
          ];
        }
        break;
    }
  }
  return $entity;
}